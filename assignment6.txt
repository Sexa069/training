1]
import java.util.Scanner;

public class ConcatenateArrays {

    public static int[] concatenateArrays(int[] nums) {
        int n = nums.length;
        int[] ans = new int[2 * n];
        
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i];
            ans[i + n] = nums[i];
        }
        
        return ans;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the length of the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        int[] concatenatedArray = concatenateArrays(nums);
        
        System.out.println("Concatenated Array:");
        for (int num : concatenatedArray) {
            System.out.print(num + " ");
        }

        scanner.close();
    }
}

2]
import java.util.Scanner;

public class OperationsToEmptyArray {

    public static int minOperations(int[] nums) {
        int n = nums.length;
        int minIndex = findMinIndex(nums);

        int operations = 0;

        while (n > 0) {
            if (minIndex == 0) {
                removeFirstElement(nums);
                n--;
            } else {
                moveFirstToEnd(nums);
            }
            operations++;
            minIndex = findMinIndex(nums);
        }

        return operations;
    }

    public static int findMinIndex(int[] nums) {
        int minIndex = 0;
        int minValue = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < minValue) {
                minValue = nums[i];
                minIndex = i;
            }
        }
        return minIndex;
    }
    public static void removeFirstElement(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            nums[i] = nums[i + 1];
        }
    }
    public static void moveFirstToEnd(int[] nums) {
        int temp = nums[0];
        for (int i = 0; i < nums.length - 1; i++) {
            nums[i] = nums[i + 1];
        }
        nums[nums.length - 1] = temp;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the length of the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        int operations = minOperations(nums);
        System.out.println("Number of operations: " + operations);

        scanner.close();
    }
}

3]
import java.util.Scanner;

public class Construct2DArray {

    public static int[][] construct2DArray(int[] original, int m, int n) {
        int[][] result = new int[m][n];
        if (original.length != m * n) {
            return new int[0][0]; 
        }

        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = original[index++];
            }
        }

        return result;
    }

    public static void print2DArray(int[][] array) {
        for (int[] row : array) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements in the original array: ");
        int length = scanner.nextInt();
        int[] original = new int[length];

        System.out.println("Enter the elements of the original array:");
        for (int i = 0; i < length; i++) {
            original[i] = scanner.nextInt();
        }

        System.out.print("Enter the number of rows in the 2D array: ");
        int m = scanner.nextInt();

        System.out.print("Enter the number of columns in the 2D array: ");
        int n = scanner.nextInt();

        int[][] result = construct2DArray(original, m, n);

        if (result.length == 0) {
            System.out.println("It is impossible to construct the 2D array.");
        } else {
            System.out.println("Constructed 2D Array:");
            print2DArray(result);
        }

        scanner.close();
    }
}

4]
import java.util.Scanner;

public class SplitArraySameAverage {

    public static boolean splitArraySameAverage(int[] nums) {
        int totalSum = 0;
        for (int num : nums) {
            totalSum += num;
        }
        int n = nums.length;
        return canSplit(nums, 0, 0, 0, totalSum, n);
    }

    private static boolean canSplit(int[] nums, int index, int sumA, int sumB, int totalSum, int count) {
        if (count == 0) {
            return sumA * count == sumB * count;
        }
        if (index == nums.length) {
            return sumA * count == sumB * count && count > 0;
        }

        if (canSplit(nums, index + 1, sumA + nums[index], sumB, totalSum, count - 1)) {
            return true;
        }
        if (canSplit(nums, index + 1, sumA, sumB + nums[index], totalSum, count - 1)) {
            return true;
        }
        return false;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements in the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        boolean result = splitArraySameAverage(nums);
        System.out.println("Is it possible to split the array with the same average: " + result);

        scanner.close();
    }
}


5]
import java.util.Scanner;

public class MatrixMultiplication {

    public static int[][] multiplyMatrices(int[][] matrix1, int[][] matrix2) {
        int rowsA = matrix1.length;
        int colsA = matrix1[0].length;
        int rowsB = matrix2.length;
        int colsB = matrix2[0].length;

        if (colsA != rowsB) {
            System.out.println("Matrix multiplication is not possible.");
            return null;
        }

        // Perform matrix multiplication
        int[][] result = new int[rowsA][colsB];
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the size of the first matrix (rows x columns):");
        int rows1 = scanner.nextInt();
        int cols1 = scanner.nextInt();

        System.out.println("Enter the size of the second matrix (rows x columns):");
        int rows2 = scanner.nextInt();
        int cols2 = scanner.nextInt();

        if (cols1 != rows2) {
            System.out.println("Matrix multiplication is not possible.");
        } else {
            int[][] matrix1 = new int[rows1][cols1];
            int[][] matrix2 = new int[rows2][cols2];

            System.out.println("Enter elements of the first matrix:");
            for (int i = 0; i < rows1; i++) {
                for (int j = 0; j < cols1; j++) {
                    matrix1[i][j] = scanner.nextInt();
                }
            }

            System.out.println("Enter elements of the second matrix:");
            for (int i = 0; i < rows2; i++) {
                for (int j = 0; j < cols2; j++) {
                    matrix2[i][j] = scanner.nextInt();
                }
            }

            int[][] productMatrix = multiplyMatrices(matrix1, matrix2);
            if (productMatrix != null) {
                System.out.println("Product Matrix:");
                printMatrix(productMatrix);
            }
        }

        scanner.close();
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}


1]
import java.util.Scanner;

public class ConcatenateArrays {

    public static int[] concatenateArrays(int[] nums) {
        int n = nums.length;
        int[] ans = new int[2 * n];
        
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i];
            ans[i + n] = nums[i];
        }
        
        return ans;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the length of the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        int[] concatenatedArray = concatenateArrays(nums);
        
        System.out.println("Concatenated Array:");
        for (int num : concatenatedArray) {
            System.out.print(num + " ");
        }

        scanner.close();
    }
}

2]
import java.util.Scanner;

public class OperationsToEmptyArray {

    public static int minOperations(int[] nums) {
        int n = nums.length;
        int minIndex = findMinIndex(nums);

        int operations = 0;

        while (n > 0) {
            if (minIndex == 0) {
                removeFirstElement(nums);
                n--;
            } else {
                moveFirstToEnd(nums);
            }
            operations++;
            minIndex = findMinIndex(nums);
        }

        return operations;
    }

    public static int findMinIndex(int[] nums) {
        int minIndex = 0;
        int minValue = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < minValue) {
                minValue = nums[i];
                minIndex = i;
            }
        }
        return minIndex;
    }
    public static void removeFirstElement(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            nums[i] = nums[i + 1];
        }
    }
    public static void moveFirstToEnd(int[] nums) {
        int temp = nums[0];
        for (int i = 0; i < nums.length - 1; i++) {
            nums[i] = nums[i + 1];
        }
        nums[nums.length - 1] = temp;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the length of the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        int operations = minOperations(nums);
        System.out.println("Number of operations: " + operations);

        scanner.close();
    }
}

3]
import java.util.Scanner;

public class Construct2DArray {

    public static int[][] construct2DArray(int[] original, int m, int n) {
        int[][] result = new int[m][n];
        if (original.length != m * n) {
            return new int[0][0]; 
        }

        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = original[index++];
            }
        }

        return result;
    }

    public static void print2DArray(int[][] array) {
        for (int[] row : array) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements in the original array: ");
        int length = scanner.nextInt();
        int[] original = new int[length];

        System.out.println("Enter the elements of the original array:");
        for (int i = 0; i < length; i++) {
            original[i] = scanner.nextInt();
        }

        System.out.print("Enter the number of rows in the 2D array: ");
        int m = scanner.nextInt();

        System.out.print("Enter the number of columns in the 2D array: ");
        int n = scanner.nextInt();

        int[][] result = construct2DArray(original, m, n);

        if (result.length == 0) {
            System.out.println("It is impossible to construct the 2D array.");
        } else {
            System.out.println("Constructed 2D Array:");
            print2DArray(result);
        }

        scanner.close();
    }
}

4]
import java.util.Scanner;

public class SplitArraySameAverage {

    public static boolean splitArraySameAverage(int[] nums) {
        int totalSum = 0;
        for (int num : nums) {
            totalSum += num;
        }
        int n = nums.length;
        return canSplit(nums, 0, 0, 0, totalSum, n);
    }

    private static boolean canSplit(int[] nums, int index, int sumA, int sumB, int totalSum, int count) {
        if (count == 0) {
            return sumA * count == sumB * count;
        }
        if (index == nums.length) {
            return sumA * count == sumB * count && count > 0;
        }

        if (canSplit(nums, index + 1, sumA + nums[index], sumB, totalSum, count - 1)) {
            return true;
        }
        if (canSplit(nums, index + 1, sumA, sumB + nums[index], totalSum, count - 1)) {
            return true;
        }
        return false;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements in the array: ");
        int length = scanner.nextInt();
        int[] nums = new int[length];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            nums[i] = scanner.nextInt();
        }

        boolean result = splitArraySameAverage(nums);
        System.out.println("Is it possible to split the array with the same average: " + result);

        scanner.close();
    }
}


5]
import java.util.Scanner;

public class MatrixMultiplication {

    public static int[][] multiplyMatrices(int[][] matrix1, int[][] matrix2) {
        int rowsA = matrix1.length;
        int colsA = matrix1[0].length;
        int rowsB = matrix2.length;
        int colsB = matrix2[0].length;

        if (colsA != rowsB) {
            System.out.println("Matrix multiplication is not possible.");
            return null;
        }

        // Perform matrix multiplication
        int[][] result = new int[rowsA][colsB];
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the size of the first matrix (rows x columns):");
        int rows1 = scanner.nextInt();
        int cols1 = scanner.nextInt();

        System.out.println("Enter the size of the second matrix (rows x columns):");
        int rows2 = scanner.nextInt();
        int cols2 = scanner.nextInt();

        if (cols1 != rows2) {
            System.out.println("Matrix multiplication is not possible.");
        } else {
            int[][] matrix1 = new int[rows1][cols1];
            int[][] matrix2 = new int[rows2][cols2];

            System.out.println("Enter elements of the first matrix:");
            for (int i = 0; i < rows1; i++) {
                for (int j = 0; j < cols1; j++) {
                    matrix1[i][j] = scanner.nextInt();
                }
            }

            System.out.println("Enter elements of the second matrix:");
            for (int i = 0; i < rows2; i++) {
                for (int j = 0; j < cols2; j++) {
                    matrix2[i][j] = scanner.nextInt();
                }
            }

            int[][] productMatrix = multiplyMatrices(matrix1, matrix2);
            if (productMatrix != null) {
                System.out.println("Product Matrix:");
                printMatrix(productMatrix);
            }
        }

        scanner.close();
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}


